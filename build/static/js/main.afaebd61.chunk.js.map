{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","props","useState","movie","setMovie","trailerUrl","setTrailerUrl","useEffect","a","get","fetchUrl","request","data","results","fetchData","className","title","map","i","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","isLargeRow","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActioinMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentries","Banner","str","n","response","random","Math","floor","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Navbar","show","handleshow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.afaebd61.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// The base url to make requests to movie database?\\\n\nconst instance = axios.create({\n  baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;\n","import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row(props) {\n  const [movie, setMovie] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1,\n    },\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(props.fetchUrl);\n      setMovie(request.data.results);\n      //   console.log(request.data.results);\n\n      return request;\n    }\n    fetchData();\n  }, [props.fetchUrl]);\n\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.name || \"\")\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <h1>{props.title}</h1>\n\n      <div className=\"row_posters\">\n        {movie.map((movie, i) => (\n          <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row_poster ${props.isLargeRow && \"row_posterLarge\"}`}\n            src={`${base_url}${\n              props.isLargeRow ? movie.poster_path : movie.backdrop_path\n            } `}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;\n","const API_KEY = \"8c2a39b74b4bcf8550e5fc980b375214\";\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActioinMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;\n","import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport requests from \"./requests\";\nimport \"./Banner.css\";\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const response = await axios.get(requests.fetchNetflixOriginals);\n      const random = Math.floor(\n        Math.random() * response.data.results.length - 1\n      );\n      setMovie(response.data.results[random]);\n\n      return response;\n    }\n    fetchData();\n  }, []);\n\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n        backgroundPosition: \"center center\",\n      }}\n    >\n      <div className=\"banner_content\">\n        <h1 className=\"banner_title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n\n        <div className=\"banner_buttons\">\n          <button className=\"banner_button\">Play</button>\n\n          <button className=\"banner_button\">My list</button>\n        </div>\n\n        <h1 className=\"banner_description\">{truncate(movie?.overview, 150)}</h1>\n      </div>\n\n      <div className=\"banner--fadeBottom\" />\n    </header>\n  );\n}\n\nexport default Banner;\n","import React from \"react\";\nimport \"./Navbar.css\";\nimport { useEffect, useState } from \"react\";\n\nconst Navbar = () => {\n  const [show, handleshow] = useState(false);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        handleshow(true);\n      } else handleshow(false);\n    });\n    return () => {\n      window.removeEventListener(\"scroll\");\n    };\n  }, []);\n  return (\n    <div className={`nav ${show && \"nav-black\"}`}>\n      <img\n        className=\"nav-logo\"\n        src=\"https://upload.wikimedia.org/wikipedia/commons/7/7a/Logonetflix.png\"\n        alt=\"Netflix Logo\"\n      />\n      <img\n        className=\"nav-avater\"\n        src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\n        alt=\"Netflix logo\"\n      />\n    </div>\n  );\n};\n\nexport default Navbar;\n","import \"./App.css\";\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport Banner from \"./Banner\";\nimport Navbar from \"./Navbar\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Banner />\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        // defaul is isLargeRow ={true}\n        isLargeRow\n      />\n\n      <Row title=\"Treding Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActioinMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentries\" fetchUrl={requests.fetchDocumentries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}